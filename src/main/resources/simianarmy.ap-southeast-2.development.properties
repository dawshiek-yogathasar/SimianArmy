# let Conformity monkey run
simianarmy.conformity.enabled = false

# dryrun mode, no email notification to the owner of nonconforming clusters is sent
simianarmy.conformity.leashed = true

# By default Conformity Monkey wakes up every hour
simianarmy.scheduler.frequency = 1
simianarmy.scheduler.frequencyUnit = HOURS
simianarmy.scheduler.threads = 1

# Conformity Monkey runs every hour.
simianarmy.calendar.openHour = 0
simianarmy.calendar.closeHour = 24
simianarmy.calendar.timezone = America/Los_Angeles

# override to force monkey time, useful for debugging off hours
#simianarmy.calendar.isMonkeyTime = true

# Conformity monkey sends notifications to the owner of unconforming clusters between the open hour and close
# hour only. In other hours, only summary email is sent. The default setting is to always send email notifications
# after each run.
simianarmy.conformity.notification.openHour = 0
simianarmy.conformity.notification.closeHour = 24

simianarmy.conformity.sdb.domain = SIMIAN_ARMY

# The property below needs to be a valid email address to receive the summary email of Conformity Monkey
# after each run
simianarmy.conformity.summaryEmail.to = foo@bar.com

# The property below needs to be a valid email address to send notifications for Conformity monkey
simianarmy.conformity.notification.defaultEmail = foo@bar.com

# The property below needs to be a valid email address to send notifications for Conformity Monkey
simianarmy.conformity.notification.sourceEmail = foo@bar.com

# By default Eureka is not enabled. The conformity rules that need to access Eureka are not added
# when Eureka is not enabled.
simianarmy.conformity.Eureka.enabled = false

# The following property is used to enable the conformity rule to check whether there is mismatch of availability
# zones between any auto scaling group and its ELBs in a cluster.
simianarmy.conformity.rule.SameZonesInElbAndAsg.enabled = true

# The following property is used to enable the conformity rule to check whether all instances in the cluster
# are in required security groups.
simianarmy.conformity.rule.InstanceInSecurityGroup.enabled = true

# The following property specifies the required security groups in the InstanceInSecurityGroup conformity rule.
simianarmy.conformity.rule.InstanceInSecurityGroup.requiredSecurityGroups = nf-infrastructure, nf-datacenter

# The following property is used to enable the conformity rule to check whether there is any instance that is
# older than certain days.
simianarmy.conformity.rule.InstanceTooOld.enabled = true

# The following property specifies the number of days used in the InstanceInSecurityGroup, any instance that is
# old than this number of days is consider nonconforming.
simianarmy.conformity.rule.InstanceTooOld.instanceAgeThreshold = 180

# The following property is used to enable the conformity rule to check whether all instances in the cluster
# have a status url defined according to Discovery/Eureka.
simianarmy.conformity.rule.InstanceHasStatusUrl.enabled = true

# The following property is used to enable the conformity rule to check whether all instances in the cluster
# have a health check url defined according to Discovery/Eureka.
simianarmy.conformity.rule.InstanceHasHealthCheckUrl.enabled = true

# The following property is used to enable the conformity rule to check whether there are unhealthy instances
# in the cluster accoring to Discovery/Eureka.
simianarmy.conformity.rule.InstanceIsHealthyInEureka.enabled = true

# You can override a cluster's owner email by providing a property here. For example, the line below overrides
# the owner email of cluster foo to foo@bar.com
# simianarmy.conformity.cluster.foo.ownerEmail = foo@bar.com

# You can exclude specific conformity rules for a cluster using this property. For example, the line below excludes
# the conformity rule rule1 and rule2 on cluster foo.
# simianarmy.conformity.cluster.foo.excludedRules = rule1,rule2

# You can opt out a cluster completely from Conformity Monkey by using this property. After a cluster is opted out,
# no notification is sent for it no matter it is conforming or not. For example, the line below opts out the cluster
# foo.
# simianarmy.conformity.cluster.foo.optedOut = true

root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources# ls
chaos.properties   conformity.properties  log4j.bak         scripts                volumeTagging.properties
client.properties  janitor.properties     log4j.properties  simianarmy.properties
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources#
root@ip-10-40-45-182:/tmp/SimianArmy/src/main/resources# cat simianarmy.properties
# see documentation at:
# https://github.com/Netflix/SimianArmy/wiki/Configuration

simianarmy.recorder.sdb.domain = SIMIAN_ARMY

# If using a non-SimbleDB recorder (LocalDB), these settings tweak defaults.
# Following should be a writeable location, for monkey events when SimpleDB is not used
#simianarmy.recorder.localdb.file=/tmp/simianarmy_events
# Max number of events to record; old events will be expired after this limit is
# reached.  Use this to avoid filling disk with events (or attach a big volume!)
#simianarmy.recorder.localdb.max_events=1000000
# Optional password to encrypt event storage.
#simianarmy.recorder.localdb.password=some_secret

simianarmy.scheduler.frequency = 1
simianarmy.scheduler.frequencyUnit = HOURS
simianarmy.scheduler.threads = 1
simianarmy.calendar.openHour = 1
simianarmy.calendar.closeHour = 23
simianarmy.calendar.timezone = Australia/Sydney
# override to force monkey time, useful for debugging off hours
#simianarmy.calendar.isMonkeyTime = true

# Allows you to Set the (case sensitive) AWS Tag Key to use for owner tags; e.g. Owner or owner
# Will be Monkey Wide - used by all Monkeys. If not set defaults to "owner"
# simianarmy.tags.owner = Owner

# Region override for Amazon Simple Email Service Client
#simianarmy.aws.email.region=us-west-1
